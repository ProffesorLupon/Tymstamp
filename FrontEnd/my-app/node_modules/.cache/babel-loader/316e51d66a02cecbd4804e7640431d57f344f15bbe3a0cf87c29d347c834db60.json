{"ast":null,"code":"import axios from'axios';/**\r\n * Create an Axios instance with a base URL and default headers.\r\n * The base URL should point to your Laravel backend's API endpoint.\r\n * It's configured to pull the URL from environment variables, falling back to a local default.\r\n */const apiService=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:8000/api',// Default for local development\nheaders:{'Content-Type':'application/json','Accept':'application/json'}});/**\r\n * Add a request interceptor to include the authentication token in every request.\r\n * This function retrieves the token from localStorage and adds it to the\r\n * Authorization header as a Bearer token. This is crucial for accessing\r\n\r\n * protected API endpoints in the Laravel backend.\r\n */apiService.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers['Authorization']=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});export default apiService;","map":{"version":3,"names":["axios","apiService","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject"],"sources":["C:/Users/Tshepiso Selemela/OneDrive/Documents/Tymstamp/FrontEnd/my-app/src/api/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n/**\r\n * Create an Axios instance with a base URL and default headers.\r\n * The base URL should point to your Laravel backend's API endpoint.\r\n * It's configured to pull the URL from environment variables, falling back to a local default.\r\n */\r\nconst apiService = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api', // Default for local development\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n});\r\n\r\n/**\r\n * Add a request interceptor to include the authentication token in every request.\r\n * This function retrieves the token from localStorage and adds it to the\r\n * Authorization header as a Bearer token. This is crucial for accessing\r\n\r\n * protected API endpoints in the Laravel backend.\r\n */\r\napiService.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default apiService;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAACE,MAAM,CAAC,CAC9BC,OAAO,CAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2BAA2B,CAAE;AACvEC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBACZ,CACF,CAAC,CAAC,CAEF;AACA;AACA;AACA;AACA;AACA;AACA,GACAN,UAAU,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,EAAK,CACV,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAC/C,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,CAAG,UAAUK,KAAK,EAAE,CACrD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAI,KAAK,EAAK,CACT,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAAd,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}