{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tshepiso Selemela\\\\OneDrive\\\\Documents\\\\Tymstamp\\\\FrontEnd\\\\my-app\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from './api/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('authToken'));\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // On initial load, check if a token exists and try to fetch user data\n    const authToken = localStorage.getItem('authToken');\n    if (authToken) {\n      setToken(authToken);\n      // You might want to add a '/api/user' endpoint check here to verify the token\n      // and fetch the user data if the page is reloaded.\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        setUser(JSON.parse(storedUser));\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    // The login function now makes a POST request to the backend\n    const response = await apiService.post('/login', {\n      email,\n      password\n    });\n    const {\n      user,\n      access_token\n    } = response.data;\n\n    // Store the token and user data in localStorage and state\n    localStorage.setItem('authToken', access_token);\n    localStorage.setItem('user', JSON.stringify(user));\n    setToken(access_token);\n    setUser(user);\n    return user; // Return user object on successful login\n  };\n  const logout = () => {\n    // Clear user data and token from state and localStorage\n    apiService.post('/logout').finally(() => {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      setUser(null);\n      setToken(null);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"OpfcLSUH+QvV1lR1/bshprk98VE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","authToken","storedUser","JSON","parse","login","email","password","response","post","access_token","data","setItem","stringify","logout","finally","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Tshepiso Selemela/OneDrive/Documents/Tymstamp/FrontEnd/my-app/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from './api/apiService';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('authToken'));\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // On initial load, check if a token exists and try to fetch user data\n    const authToken = localStorage.getItem('authToken');\n    if (authToken) {\n      setToken(authToken);\n      // You might want to add a '/api/user' endpoint check here to verify the token\n      // and fetch the user data if the page is reloaded.\n      const storedUser = localStorage.getItem('user');\n      if(storedUser) {\n        setUser(JSON.parse(storedUser));\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    // The login function now makes a POST request to the backend\n    const response = await apiService.post('/login', { email, password });\n    const { user, access_token } = response.data;\n\n    // Store the token and user data in localStorage and state\n    localStorage.setItem('authToken', access_token);\n    localStorage.setItem('user', JSON.stringify(user));\n    setToken(access_token);\n    setUser(user);\n    return user; // Return user object on successful login\n  };\n\n  const logout = () => {\n    // Clear user data and token from state and localStorage\n    apiService.post('/logout').finally(() => {\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n        setUser(null);\n        setToken(null);\n    });\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, logout, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,UAAU,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACa,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;EACrE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,SAAS,GAAGJ,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnD,IAAIG,SAAS,EAAE;MACbL,QAAQ,CAACK,SAAS,CAAC;MACnB;MACA;MACA,MAAMC,UAAU,GAAGL,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAGI,UAAU,EAAE;QACbR,OAAO,CAACS,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC;MACjC;IACF;IACAF,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC;IACA,MAAMC,QAAQ,GAAG,MAAMtB,UAAU,CAACuB,IAAI,CAAC,QAAQ,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACrE,MAAM;MAAEd,IAAI;MAAEiB;IAAa,CAAC,GAAGF,QAAQ,CAACG,IAAI;;IAE5C;IACAd,YAAY,CAACe,OAAO,CAAC,WAAW,EAAEF,YAAY,CAAC;IAC/Cb,YAAY,CAACe,OAAO,CAAC,MAAM,EAAET,IAAI,CAACU,SAAS,CAACpB,IAAI,CAAC,CAAC;IAClDG,QAAQ,CAACc,YAAY,CAAC;IACtBhB,OAAO,CAACD,IAAI,CAAC;IACb,OAAOA,IAAI,CAAC,CAAC;EACf,CAAC;EAED,MAAMqB,MAAM,GAAGA,CAAA,KAAM;IACnB;IACA5B,UAAU,CAACuB,IAAI,CAAC,SAAS,CAAC,CAACM,OAAO,CAAC,MAAM;MACrClB,YAAY,CAACmB,UAAU,CAAC,WAAW,CAAC;MACpCnB,YAAY,CAACmB,UAAU,CAAC,MAAM,CAAC;MAC/BtB,OAAO,CAAC,IAAI,CAAC;MACbE,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,oBACER,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAEzB,IAAI;MAAEE,KAAK;MAAEU,KAAK;MAAES,MAAM;MAAEf;IAAQ,CAAE;IAAAR,QAAA,EAClEA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC9B,EAAA,CAhDWF,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAkDzB,OAAO,MAAMkC,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM1C,UAAU,CAACM,WAAW,CAAC;AAAA;AAACoC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}