{"ast":null,"code":"import React from'react';import{Navigate,useLocation}from'react-router-dom';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,allowedRoles}=_ref;const{user,token,loading}=useAuth();const location=useLocation();if(loading){// You can return a loading spinner here while the auth state is being determined\nreturn/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}if(!token||!user){// Redirect them to the /login page, but save the current location they were\n// trying to go to. This allows us to send them along to that page after they login.\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});}if(allowedRoles&&!allowedRoles.includes(user.role)){// If user's role is not allowed, redirect them to a default page\n// For example, an employee trying to access an admin page\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true});}return children;};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsx","_jsx","ProtectedRoute","_ref","children","allowedRoles","user","token","loading","location","to","state","from","replace","includes","role"],"sources":["C:/Users/Tshepiso Selemela/OneDrive/Documents/Tymstamp/FrontEnd/my-app/src/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from './AuthContext';\n\nconst ProtectedRoute = ({ children, allowedRoles }) => {\n  const { user, token, loading } = useAuth();\n  const location = useLocation();\n\n  if (loading) {\n    // You can return a loading spinner here while the auth state is being determined\n    return <div>Loading...</div>;\n  }\n\n  if (!token || !user) {\n    // Redirect them to the /login page, but save the current location they were\n    // trying to go to. This allows us to send them along to that page after they login.\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  if (allowedRoles && !allowedRoles.includes(user.role)) {\n    // If user's role is not allowed, redirect them to a default page\n    // For example, an employee trying to access an admin page\n    return <Navigate to=\"/dashboard\" replace />;\n  }\n\n  return children;\n};\n\nexport default ProtectedRoute;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CACxD,OAASC,OAAO,KAAQ,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExC,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAgC,IAA/B,CAAEC,QAAQ,CAAEC,YAAa,CAAC,CAAAF,IAAA,CAChD,KAAM,CAAEG,IAAI,CAAEC,KAAK,CAAEC,OAAQ,CAAC,CAAGT,OAAO,CAAC,CAAC,CAC1C,KAAM,CAAAU,QAAQ,CAAGX,WAAW,CAAC,CAAC,CAE9B,GAAIU,OAAO,CAAE,CACX;AACA,mBAAOP,IAAA,QAAAG,QAAA,CAAK,YAAU,CAAK,CAAC,CAC9B,CAEA,GAAI,CAACG,KAAK,EAAI,CAACD,IAAI,CAAE,CACnB;AACA;AACA,mBAAOL,IAAA,CAACJ,QAAQ,EAACa,EAAE,CAAC,QAAQ,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAEH,QAAS,CAAE,CAACI,OAAO,MAAE,CAAC,CACpE,CAEA,GAAIR,YAAY,EAAI,CAACA,YAAY,CAACS,QAAQ,CAACR,IAAI,CAACS,IAAI,CAAC,CAAE,CACrD;AACA;AACA,mBAAOd,IAAA,CAACJ,QAAQ,EAACa,EAAE,CAAC,YAAY,CAACG,OAAO,MAAE,CAAC,CAC7C,CAEA,MAAO,CAAAT,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}