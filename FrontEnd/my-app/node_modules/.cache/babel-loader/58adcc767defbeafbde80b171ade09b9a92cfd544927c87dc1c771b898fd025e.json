{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import apiService from'./api/apiService';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[token,setToken]=useState(localStorage.getItem('authToken'));const[loading,setLoading]=useState(true);useEffect(()=>{// On initial load, check if a token exists and try to fetch user data\nconst authToken=localStorage.getItem('authToken');if(authToken){setToken(authToken);// You might want to add a '/api/user' endpoint check here to verify the token\n// and fetch the user data if the page is reloaded.\nconst storedUser=localStorage.getItem('user');if(storedUser){setUser(JSON.parse(storedUser));}}setLoading(false);},[]);const login=async(email,password)=>{// The login function now makes a POST request to the backend\nconst response=await apiService.post('/login',{email,password});const{user,access_token}=response.data;// Store the token and user data in localStorage and state\nlocalStorage.setItem('authToken',access_token);localStorage.setItem('user',JSON.stringify(user));setToken(access_token);setUser(user);return user;// Return user object on successful login\n};const logout=()=>{// Clear user data and token from state and localStorage\napiService.post('/logout').finally(()=>{localStorage.removeItem('authToken');localStorage.removeItem('user');setUser(null);setToken(null);});};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,token,login,logout,loading},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","authToken","storedUser","JSON","parse","login","email","password","response","post","access_token","data","setItem","stringify","logout","finally","removeItem","Provider","value","useAuth"],"sources":["C:/Users/Tshepiso Selemela/OneDrive/Documents/Tymstamp/FrontEnd/my-app/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from './api/apiService';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('authToken'));\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // On initial load, check if a token exists and try to fetch user data\n    const authToken = localStorage.getItem('authToken');\n    if (authToken) {\n      setToken(authToken);\n      // You might want to add a '/api/user' endpoint check here to verify the token\n      // and fetch the user data if the page is reloaded.\n      const storedUser = localStorage.getItem('user');\n      if(storedUser) {\n        setUser(JSON.parse(storedUser));\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    // The login function now makes a POST request to the backend\n    const response = await apiService.post('/login', { email, password });\n    const { user, access_token } = response.data;\n\n    // Store the token and user data in localStorage and state\n    localStorage.setItem('authToken', access_token);\n    localStorage.setItem('user', JSON.stringify(user));\n    setToken(access_token);\n    setUser(user);\n    return user; // Return user object on successful login\n  };\n\n  const logout = () => {\n    // Clear user data and token from state and localStorage\n    apiService.post('/logout').finally(() => {\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n        setUser(null);\n        setToken(null);\n    });\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, logout, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,MAAO,CAAAC,UAAU,KAAM,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1C,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAQ,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAACa,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CACrE,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAgB,SAAS,CAAGJ,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CACnD,GAAIG,SAAS,CAAE,CACbL,QAAQ,CAACK,SAAS,CAAC,CACnB;AACA;AACA,KAAM,CAAAC,UAAU,CAAGL,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC/C,GAAGI,UAAU,CAAE,CACbR,OAAO,CAACS,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC,CACjC,CACF,CACAF,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAK,KAAK,CAAG,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,GAAK,CACvC;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAtB,UAAU,CAACuB,IAAI,CAAC,QAAQ,CAAE,CAAEH,KAAK,CAAEC,QAAS,CAAC,CAAC,CACrE,KAAM,CAAEd,IAAI,CAAEiB,YAAa,CAAC,CAAGF,QAAQ,CAACG,IAAI,CAE5C;AACAd,YAAY,CAACe,OAAO,CAAC,WAAW,CAAEF,YAAY,CAAC,CAC/Cb,YAAY,CAACe,OAAO,CAAC,MAAM,CAAET,IAAI,CAACU,SAAS,CAACpB,IAAI,CAAC,CAAC,CAClDG,QAAQ,CAACc,YAAY,CAAC,CACtBhB,OAAO,CAACD,IAAI,CAAC,CACb,MAAO,CAAAA,IAAI,CAAE;AACf,CAAC,CAED,KAAM,CAAAqB,MAAM,CAAGA,CAAA,GAAM,CACnB;AACA5B,UAAU,CAACuB,IAAI,CAAC,SAAS,CAAC,CAACM,OAAO,CAAC,IAAM,CACrClB,YAAY,CAACmB,UAAU,CAAC,WAAW,CAAC,CACpCnB,YAAY,CAACmB,UAAU,CAAC,MAAM,CAAC,CAC/BtB,OAAO,CAAC,IAAI,CAAC,CACbE,QAAQ,CAAC,IAAI,CAAC,CAClB,CAAC,CAAC,CACJ,CAAC,CAED,mBACER,IAAA,CAACC,WAAW,CAAC4B,QAAQ,EAACC,KAAK,CAAE,CAAEzB,IAAI,CAAEE,KAAK,CAAEU,KAAK,CAAES,MAAM,CAAEf,OAAQ,CAAE,CAAAP,QAAA,CAClEA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAA2B,OAAO,CAAGA,CAAA,GAAMpC,UAAU,CAACM,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}