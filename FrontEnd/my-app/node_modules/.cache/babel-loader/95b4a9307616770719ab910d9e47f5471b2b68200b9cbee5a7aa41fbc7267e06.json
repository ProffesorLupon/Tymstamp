{"ast":null,"code":"import axios from 'axios';\n\n/**\r\n * Create an Axios instance with a base URL and default headers.\r\n * The base URL should point to your Laravel backend's API endpoint.\r\n * It's configured to pull the URL from environment variables, falling back to a local default.\r\n */\nconst apiService = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  // Default for local development\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n/**\r\n * \r\n * This function retrieves the token from localStorage and adds it to the\r\n * Authorization header as a Bearer token. This is crucial for accessing\r\n\r\n * protected API endpoints in the Laravel backend.\r\n */\napiService.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default apiService;","map":{"version":3,"names":["axios","apiService","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject"],"sources":["C:/Users/Tshepiso Selemela/OneDrive/Documents/Tymstamp/FrontEnd/my-app/src/api/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n/**\r\n * Create an Axios instance with a base URL and default headers.\r\n * The base URL should point to your Laravel backend's API endpoint.\r\n * It's configured to pull the URL from environment variables, falling back to a local default.\r\n */\r\nconst apiService = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api', // Default for local development\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n});\r\n\r\n/**\r\n * \r\n * This function retrieves the token from localStorage and adds it to the\r\n * Authorization header as a Bearer token. This is crucial for accessing\r\n\r\n * protected API endpoints in the Laravel backend.\r\n */\r\napiService.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default apiService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC9BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EAAE;EACvEC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,UAAU,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}